

code snippets 만들기

https://www.youtube.com/watch?v=t4ESp_po6Wc


    "React Class Component": {
        "prefix": "rcc",
        "body": [
            "//import React, {Component, PureComponent, Fragment} from \"react\";",
            "//import Redux from \"redux\";",
            "//import ReactRedux, {Provider} from \"react-redux\";",
            "//import {BrowserRouter,Switch,Router,Route,IndexRoute,Link,IndexLink,NavLink} from \"react-router-dom\";",
            "//import ReactDOM from \"react-dom\";",
            "",
            "console.log(React);",
            "",
            "class ${1:${TM_FILENAME_BASE}} extends React.Component {",
            "",
            "    static defaultProps = {  /*  props의 디폴트 값 설정 */ }",
            "    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ }",
            "    state = {",
            "        // 상태값(변수)을 정의한다.",
            "",
            "    }",
            "    style = {",
            "        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.",
            "        // getter 를 사용하면 객체 내부 참조가 가능하다.",
            "    ",
            "    }",
            "    func = {",
            "        // func에 정의된 메서드는 반드시 constructor에서 this를 bind() 처리해야 한다.",
            "        // func에는 자식 컴포넌트에 넘길 메서드만 작성한다.",
            "        // 왜 자식에게 부모 메서드를 넘기나? 부모의 상태값을 변경하기 위해서.",
            "    ",
            "    }",
            "    constructor(props) {",
            "        super()",
            "        // this 바인딩. 예시) this.func.handler = this.func.handler.bind(this)",
            "        // func 에 정의한 메서드는 반드시 this bind 처리해야 한다.",
            "        ",
            "        // ref 만들기. 예시) this.inputref = React.createRef()",
            "        ",
            "    }",
            "    componentDidMount() {",
            "        // 마운트 완료 후에 실행됨 : 페이지 load 될 때 한번",
            "        // componentDidMount가 사용되는 경우: redux 구독 설정, focus 줄때",
            "    }",
            "    componentDidUpdate(prevProps, prevState) {",
            "        // 업데이트 완료 후에 실행됨 : 여러번, state 가 변경될 때마다",
            "    }",
            "    componentWillUnmount() {",
            "        // 언마운트 완료 후에 실행됨 : 페이지 unload 될 때 한번",
            "        // componentWillUnmount가 사용되는 경우: redux 구독 해제, 이벤트 핸들러 해제",
            "    }",
            "    handler = (event)=>{",
            "        // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다",
            "        console.log(event.target)",
            "    }",
            "    render() { // JSX로 화면 만들기",
            "        return (",
            "            <div>",
            "                ${2:}",
            "            </div>",
            "        )",
            "    }",
            "};",
            "//export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Class Component"
    },
    "React Functional Component": {
        "prefix": "rfc",
        "body": [
            "//import React, { useState, useEffect, useRef, useReducer, useContext, useMemo, useCallback, useImperativeHandle, useLayoutEffect, useDebugValue } from \"react\";",
            "//import {BrowserRouter,Switch,Router,Route,IndexRoute,Link,IndexLink,NavLink,useRouteMatch,useParams} from \"react-router-dom\";",
            "//import ReactDOM from \"react-dom\";",
            "",
            "console.log(React);",
            "console.log(React.useState); // 상태값",
            "console.log(React.useEffect); // 생명주기",
            "console.log(React.useRef); // 속성값",
            "console.log(ReactDOM);",
            "",
            "function ${1:${TM_FILENAME_BASE}}(props) {",
            "    //const [user, setUser] = React.useState({ userId: 0, name: \"\", age: 0, })",
            "    return (",
            "        <div>",
            "            ${2:}",
            "        </div>",
            "    )",
            "};",
            "//export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Functional Component"
    },
    "Redux Code": {
        "prefix": "rdx",
        "body": [
            "",
            "// React-Redux 작성 순서",
            "// 1. React-Redux 플러그인 추가 or import.",
            "// //import Redux from \"redux\";",
            "// //import ReactRedux, {Provider} from \"react-redux\";",
            "// console.log(window.Redux||window.dispatch||'Redux import 오류');",
            "// console.log(window.ReactRedux||window.Provider||'ReactRedux import 오류');",
            "// ",
            "// 2-1. action상수 만들기. action상수에는 접두사를 붙인다.",
            "// const 액션상수 = { TASK_READ: \"task/READ\", };",
            "// 2-2. action함수 만들기.",
            "// const 액션함수 = { taskRead(task){ return { type: 액션상수.TASK_READ, playload: { task } } } };",
            "//",
            "// 3. reducer 만들기. ",
            "// 3-1. reducer state 만들기. 리듀서별로 상태값을 관리할 수 있다.",
            "//    예시) const state이름 = { }",
            "// 3-2. reducer 만들기.",
            "//    예시) const reducer이름 = function(state = state이름, action)",
            "// 3-3. reducer 합치기. Redux.combineReducers() 사용하여 개별 리듀서를 합치기.",
            "//    예시) const reducer = Redux.combineReducers({ a: reducer이름, b: reducer이름 });",
            "// 4. store 만들기. store 만들기. 리덕스 개발자 도구 적용. ",
            "//    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()",
            "//    예시) const store = Redux.createStore(reducer, preloadedState, enhancer); ",
            "//    store의 state 형태 = { a: {...중략},  b: {...중략} }",
            "//",
            "// 5-1. 컴포넌트 만들기",
            "// 5-2. mapStateToProps 함수 만들기. const mapStateToProps = ( {task} ) => { return { task: task, } }",
            "// 5-3. mapDispatchToProps 함수 만들기. const mapDispatchToProps = ( {task} ) => { return { task: task, } }",
            "// 5-4. 컴포넌트와 store connect 하기. 예시) 컴포넌트명 = ReactRedux.connect(mapStateToProps,mapDispatchToProps)(컴포넌트명)",
            "//",
            "// 6. 컴포넌트에 store Provider 하기. 예시) <ReactRedux.Provider store={store}> <App /> </ReactRedux.Provider>",
            "",
        ],
        "description": "Redux React Code script"
    },
    "React script import": {
        "prefix": "reactplugin",
        "body": [
            "",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.js\">",
            "    /* 자바스크립트로 컴파일러. ES6-->ES5, JSX-->ES5 */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/16.12.0/umd/react.development.js\">",
            "    /* import React, { Component, PureComponent } from \"react\" */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.11.0/umd/react-dom.development.js\">",
            "    /* import ReactDOM from \"react-dom\" */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/5.2.0/react-router-dom.min.js\">",
            "    /*  import ReactRouterDOM, {BroswerRouter,Switch,Router,Route,IndexRoute,Link,IndexLink,NavLink} from \"react-router-dom\" */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.5/redux.js\">",
            "    /* import Redux from \"redux\" */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/7.2.2/react-redux.js\">",
            "    /*  import ReactRedux, {Provider} from \"react-redux\" */",
            "</script>",
            "< script src=\"https://unpkg.com/immer@9.0.1/dist/immer.umd.production.min.js\">",
            "    /* 불변객체 state를 조작하는 라이브러리 */",
            "    /* import immer from \"immer\" */",
            "</script>",
            "< script type=\"text/babel\">",
            "    ",
            "</script>"
        ],
        "description": "React script"
    },
    "Axios": {
        "prefix": "axios",
        "body": [
            "// import axios from \"axios\";",
            "",
            "axios({",
            "    url: \"item\",  // 호출되는 서버 주소.",
            "    method: \"get\",       // request method: get, post, delete, put",
            "    params: { },  // 서버로 보내는 데이터. 예시) { data1:\"test1\", data2:\"test2\" } ",
            "    timeout: 30000,    // 최대 대기 시간: 30초. 30초 이상이 되면 fail 부분이 실행됨.",
            "    responseType: \"json\",  // response로 넘어오는 데이터 형태: text, html, xml, json, jsonp, script",
            "})",
            ".then( (res) => {",
            "    console.log(res.data);",
            "    this.message1 = res.data;",
            "})",
            ".catch((error) => {",
            "    console.log(error);",
            "});"
        ],
        "description": "React script"
    }